	https://www.youtube.com/watch?v=Su0-Y9coU3s&list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY&index=21 ===> 64 video tutorial

1) Introduction Node-js
		open source
		Cross-pateform [ avaliable (mac+Winndows+Linux)
		JavaScript Run time env
		
		
2) ECMAScript  [ECMA International]
		(JS run top of ECMAScript)
		1997
		2015[ES6] 
		
 3) Chrome V8 Engine
		Each Browser have different JS engine 
			3.1) V8 - Chrome engine   -------------> Core of NodeJs [writen in C++)
			3.2) SpiderMonkey - Firefox
			3.3) JavaScriptCore - Apple Safari
			3.4) Chakra - Microsoft Edge
			
4) JavaScript Run time Archicture
		V8 JS Engine (Memory+Call Stack)[EgmaScript/C++] ----> Chrome Browser API(DOM+ STROAGE+ TIMERS) -----> EvenLoop(MictoTask Que+ CallBack Task Que) (Asynck) <--> V8 JS Engine
			
5) NodeJs
		RUN JS program outside the browser (with V8 engile)
		OPEN SOURCE GITHUB [https://github.com/nodejs/node/tree/main]
			deps/ 
				V8(chrome browser engine)
				lib-uv (help to access fileSystem+ network ) opensrv lib-uv
				z-lib , Crypto, ext....
				
			src/
				(C++ code)
				
			libs/
				fs.js
				path.js .... (js lib code,  tel details to C++)
 
6) Hello World
		REPL (Read | Evaluate | Print | Loop)
		node -v
		node index.js
		node index
		
7) continue in Git..................................................
7) Browser Js ---> DOM, cookies (API)
   Node js    ---> Dont have Document & Windows ,provide throuth with its Modules 

###############################		
8) Modules
###############################
		Encapsulated reusable chunk of code
		Types
			8.1) Local Modules   ---> movie.js  (develope create)
			8.2) Build in Modules --> path.js (node js ship out of box)
			8.3) Third party module  ---> datepicker.js
 
9/10) Local Modules******************************************************************************************************
		each .js file is a module (eg: 3_math.js) 
		DEBUG ===> Select file in vs-code --> RUN & Debug ===> step by step run
		EXPORT ===> module.exports = {add,sub};
					exports.add= (a,b) => a+b;
					
	11) Module Scope
	12) Module Wraper [IIFE] (alys wrape with 5 parameters)
			(function(exports,require,module,__filename,__dirname) {
				const superHero="kamal";
				console.log(msg,superHero);
			})("Hi:");
			
			exports, -----> export thr .js functions
			require, -----> importing the .js file
			module, ------> each .js file
			__filename,
			__dirname ---===> this variable can seee when run with Debug mode
			
	13/14) Module Caching / import & export
			cash the name value when modifi setName("kreshan")

	15) Exports  | Module.exports different
			15.1) exports.sub= (a,b) => a-b;
			15.2) module.exports = {add,sub};
			
	16) ES Modules [.MJS]
			ES Module | EcmaScript Module | ESM
			
			2.2_server.mjs (ES Module)
				>> node ./2.2_server.mjs ---> run th efilr [5min/64]
						module.exports = {add,sub};
						import {add,sub}  from './math.mjs';
						
			2.1_server.js (Common Js)
				>> node 2.1_server.js
						module.exports = {add,sub};
						const {add,sub}= require('./3_math');  ----> index.js
	 
	 
	17) Importing JSON and Watch Mode
			const data=require("./data.json");
	 
			 Watch Mode [same like node demon
			 ---> restarted the process when change in import object(require() )
				>>node --watch .\1_index.js   *****************************************
			

			
18) Built-in Modules [8.2] ******************************************************************************************************
		(node js ship out of box)
		18.1) path.js 
		18.2) events
		18.3) fs
		18.4) stream
		18.5) http , ext...........
		>> node --watch .\4_BuildInModule.js
		
		
	19) path [18.1]
	20) Callback Pattern	
			20.1) SynChronous callback 
				(callback is execute imediately)
				 let number=[1,2,6,4,5];
					number.sort((a,b)=> a-b);
					number.filter(n => n%2 ===0);
					number.map(n=> n/2);	
					
			20.2) AsynChronous callback 
				(continue & resume code execution after AsynChronous operation completed)
					blocking execution
					read data from file
					
	21/22) Events Module | Extending from EventEmitter [18.2]
				events allowed to code non-blocking manner
					events trigered
					show the responce
					  
			class PitzaShop extends EventEmitter{
			}
			
	23/24/25) Detours
			Charactor Set
				Ascii table|Unicode [Charactor-> number-> binary ]
				
			Encording
				character encoding system [UTF-8] --> Character shore in Binary(8-bit) format
				V == 86 == [0101 0110]
				
			Stream & Buffer
				Stream: Sequence of data move one point to another[between compouer | between files]
						chunk By chunk data download (from youtube | log file]
				Buffer: Node send data chunk size (buffer 100 lines)
				
			Asynchronous javaScript
				JS --> Synchronous | blocking |Single thread (alys run in Main thread| Single task per time)	======> So JS Have issue to create Apple
				NEW: Asynchronous | Non-blocking ===> behavior can do in Browser(FrountEnd) & NodeJs (Backend)
					
					
	26/27) FS 
			Synchronous | Aschronous
				const fileContains_sync=fs.readFileSync('./logs/log_read.txt','UTF-8');
				fs.readFile('./logs/log_read.txt','UTF-8',(error, data) => {   })
			
			Promize Model
				fs_p.readFile('./logs/log_read.txt','UTF-8')
					  .then()
					  .catch();
					  
			Async function
				async function readFile(){
					try{
						const data= await fs_p.readFile('./logs/log_read.txt','UTF-8');
					}catch(err){
						console.log("fs-promizes2 error:"+error);
					}
				}
	
	28/29) FS [Streams & Pipes]
			readable Strean
			writable stream
			Duplex stream==> read & write |socket program
			Transform stream -> compres to ZIP file [using PIPES]
			
	30/31/32/33/34/35) HTTP
			30)http Vs node
				Node js access OS function like (Network)
				Node As an event loop | to run task Asynchronous| non blocking- can handel large volum data
				node:http allow create web server , can transfer data over http
			
		    31) Creating a Node Server	
			32) JSON Response [http://localhost:3000/jsonRes] 
					const user={"name":"kreshan", "age":33}
					res.writeHead(200,{'Content-type':'application/json'});
					res.write(JSON.stringify(user));
			
			33) HTML Response [http://localhost:3000/htmlRes ]
					const html= fs.readFileSync('index.html','utf-8');  
					res.end(html);	
			
					const readStream= fs.createReadStream('index.html'); 
					readStream.pipe(res);
			
			34) HTML Template [Dynamicaly change the value]
					let html= fs.readFileSync('index.html','utf-8'); 
					html=html.replace("{{childName}}",childName);
					
			35) HTTP Routing
					if(req.url === '/htmlRes'){}
					else{}
					
	36) Web Framework	
			nodejs lib ==>top of http -> express| nest| hapi |koa| sails
			
37 - Node Runtime Recap ******************************************************************************************************
		37.1) DEPENDENCY
				V8----> chrome engine
				LIB-UV  --> (help to access fileSystem[fs] + network(http) ) | help to handel multi thread (JS:Synchronous ----> NODE:Asynchronous)
				Z-LIB   ---> zip
				CRYPTO + ext...
			
		37.2) C/C++ features
		
		37.3) JS libeary

38/39/40) LIB-UV 
		open Src lib - suppoer all plateform
		Handel Asynchronous | non-blocking in Node-js
		USING: ENENT LOOP
			   THREAD POOL
			   
		39) THREAD POOL
				without libuv| Sync  | blocking     | more times
				with libuv   | Async | non-blocking |less time
				
		40) THREAD POOL SIZE 
				base on time==>4+4+2 (libuv thread pool have 4 thread default)
				POOL SIZE DEFAULT = 4
				process.env.UV_THREADPOOL_SIZE = 12; //12< OS.cpus().length can change
				
				==> 4+4+2
				libuv-Hash time  1428
				libuv-Hash time  1453
				libuv-Hash time  1589
				libuv-Hash time  1592
				
				libuv-Hash time  2989
				libuv-Hash time  3057
				libuv-Hash time  3103
				libuv-Hash time  3163
				
				libuv-Hash time  4149
				libuv-Hash time  4202
				
41) Network I/O		
		lib-uv handel in 2 different Way 
				1) Native Async machanicium -----> [https] in OS, | it also non-blocking the main thread
						Kernal Mechanacium
							Linus  :: epoll
							Mac    :: kqueue
							Windows:: IO Completion
							
				2) Thread Pool ------> [crypto]
				
42-48) Event Loop - (theary 14 Min)
		JS==> Synchronous |blocking | Single THREAD
		LIB-UV==> Asynchronous method run on below 6 QUEUE
		
		V8[MemoryHeap | Call Stack | global()] <----> for Async function [LIB-UV : (1) Native OS Async Mechanasiun | (2) Thread pool ]
		
		LUB-UV EVEN LOOP
			1) timer Queue
			2) Input/Output queue
			3) check queue
			4) close queue
			5) MicroTask Queue
				5.1) nextTick Queue
				5.2) promize Queue
			

		43) MicroTask Queues execution flore theory
				5.1) nextTick Queue	::process.nextTick(	 --P1 (1,2,3)
				5.2) promize Queue  ::Promise.resolve()  --P2 (5,6,7,
				
				1) timer Queue
				
				
				process.nextTick()  		1
				process.nextTick(			2
						process.nextTick()	4 
					)
				process.nextTick()			3
				
				Promise.resolve()			5
				Promise.resolve(			6
						process.nextTick() 	8 
					)
				Promise.resolve()			7
				
		44) Timer Queue
				SetTimeout()				T9
				SetTimeout(()=>{			T10
						process.nextTick()	N11			
					})
				SetTimeout()				T12
				
				process.nextTick()  		N1
				process.nextTick(			N2
						process.nextTick()	N4 
					)
				process.nextTick()			N3
				
				Promise.resolve()			P5
				Promise.resolve(			P6
						process.nextTick() 	N8 
					)
				Promise.resolve()			P7
				
		45) Input/Output queue ==> readFile()
				SetTimeout(()=>,0)					: 3 4 (can be any, when cuu bust timer Q because 4)
				fs.readFile("./data.log",()=>{})	: 4 3
				process.nextTick() 					: 1
				Promise.resolve()					: 2
		
		46/47) I/O Polling ===>[setImmediate()]
				SESSION_1
					SetTimeout(()=>,0)					: 3 
					fs.readFile("./data.log",()=>{})	: 555 [last= because of setImmediate()]
					process.nextTick() 					: 1
					Promise.resolve()					: 2
					setImmediate()						: 4
					
				SESSION_2	
					SetTimeout(()=>,0)					: 3 
					fs.readFile("./data.log",()=>{		:4
							setImmediate()				:7 (7,5,6 on this list 7 is last)
							process.nextTick()			:5
							Promise.resolve()			:6
						})								
					process.nextTick() 					: 1
					Promise.resolve()					: 2
				
				SESSION_3
					setImmediate()				:: 1
					setImmediate(				:: 2
							process.nextTick()	:: 3
							Promise.resolve()	:: 4
						)
					setImmediate()				:: 5
					
				Session_4 (order can be swap)
					setImmediate
					SetTimeout(()=>,0)
		
		48) close queue
				const readStrean=fs.readfile()
				readStrean.close()
				
				readStrean.on("close",()=>{		: 5
				}
				setImmediate()					: 4
				SetTimeout(()=>,0)				: 3
				process.nextTick()				: 1
				Promise.resolve()				: 2
				
		EVENT_LOOP: It was orchestrates the execution os SYNC| ASYNC code
					execution the callBack in 6 different QUEUE
					
49) NPM [Node Package Manager]
		package libeary (like yarn)
		we can user outhe developer code, instance od re-developement.
		
50/51/52) Project initilization with vs-code 
        50) paskage.json  install
                npm init     ---> anser question ->create .json file

        51) node_modules  install 
				[https://www.npmjs.com/] ===> check the lib details hear
                npm install upper-case
                npm install abc_module
                npm uninstall abc_module

		52) using upper-case in code 
				npm i date-and-time
				
		53) npm install  ===> install all dependency using CLI
		
		54) versioning
			node_module Update [majoe ver, minor version, patch]
                npm i date-and-time@3.0.3
                ^4.  2.3  (only change minor veriopn, patch version)
                ~4.2  .3  (only change patch version)
				
		55) Global Packages [not comming to package.json file]
				npm install -g nodemon  [--watch] ---> auto run
				npm uninstall -g nodemon
				
		56) npm Scripts
				==> Before: node --watch 6_testnpm.js
				==> PACKAGE.JSON
				"scripts": {
					"startK": "node 6_testnpm.js"
				  }
				  
				>> cd D:\4_NODEJS_K\NodeJS_2023_All\NodeTutorial_64
				>> npm run startK
				
##################################################################################				
57) Publishing an npm Package
##################################################################################
		https://www.npmjs.com/ -> SignUp -> 
				kreshan88 | 
				kreshan88+key+Pd#1 
				kreshan882@gmail.com
				
		>>cd D:\4_NODEJS_K\NodeJS_2023_All\NodeTutorial_64
		>> npm adduser kreshan88    -------> add pw in browser
		>> npm publish				-------> https://www.npmjs.com/package/node-tutorial-64   (Upload success)
		>> npm i node-tutorial-64   -------> anyone can download and user
		
		
58/59/60) CLI
		58) Building CLI Tools	
			CLI eg: NPM | GIT
			cd D:\4_NODEJS_K\NodeJS_2023_All\NodeTutorial_64\my-custom-cli
				#!/usr/bin/env node
				console.log("kre cli pokedex test");
				
			   "bin": {
					"kre-pokedex":"index.js"
			   },
			  
			>> npm install -g
			>> kre-pokedex   ----> local compoter anywhere its runing
		
		
		59) CLI Options [Run With parameter]
			cd D:\4_NODEJS_K\NodeJS_2023_All\NodeTutorial_64\my-custom-cli
			REST SERVICE LIST===> https://pokeapi.co/
			SERVICE ============> https://pokeapi.co/api/v2/pokemon/charmander  -----> print first 5 pokeman name
			
			>> kre-pokedex -------> just run any location 
			>> npm install yargs
			>> kre-pokedex --pokemon=charmander
			>> kre-pokedex --pokemon=mew ==========> [ 'pound', 'mega-punch', 'pay-day', 'fire-punch', 'ice-punch' ]
			
			
		60) Interactive CLI Tools [list of question asked from user]
			>> npm install inquirer@8.2.5
			
		61) Cluster Module [improve CPU profomance]
				
				cluster.ja    -----------> check the different
			
				TIME CHECK ----> Inspct -> netword-> refresh -> localhost [time] 
				
				61.1) NO_CLUSTER.JS
						both taken 11 Second ----> because of Single thread
						http://localhost:3000/slowpage ---> http://localhost:3000/  (both 11S)  -------> can Resolved using cluster mode
						http://localhost:3000/ (0.3 S) ---> http://localhost:3000/slowpage  (11 S)
					
				61.2) CLUSTER.JS
						Master Node(index.js) ---> Worker Node 1 | Worker Node 2 | .... ----> each worker node have own (V8 engine/ memory /event loop )
						
				16.2) Worker Node handel in pm2
						>> cd D:\4_NODEJS_K\NodeJS_2023_All\NodeTutorial_64\
						>> npm install -g pm2
						>> pm2 start no_cluster.js -i 0
						>> pm2 ps
						>> pm2 stop no_cluster.js
						
		62) Worker Threads Module
				CLUSTER MODE : Multi Instance od Node JS (using fork())
				WORK THRD MODEL: Single NodeJs Instance , run in multi app-Thread
								 const {Worker}=require("node:worker_threads");
							
63) Deploying Node.js App
		